{"ast":null,"code":"import _regeneratorRuntime from\"/mnt/c/Users/Iswara/Documents/Code Practice/Clever Programmer/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/mnt/c/Users/Iswara/Documents/Code Practice/Clever Programmer/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/mnt/c/Users/Iswara/Documents/Code Practice/Clever Programmer/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import axios from\"./axios\";import\"./Row.css\";import{base_url}from\"./requests\";import YouTube from\"react-youtube\";import movieTrailer from\"movie-trailer\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Row=function Row(_ref){var title=_ref.title,fetchUrl=_ref.fetchUrl,isLargeRow=_ref.isLargeRow;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),movies=_useState2[0],setMovies=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),trailerUrl=_useState4[0],setTrailerUrl=_useState4[1];useEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var request;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(fetchUrl);case 2:request=_context.sent;setMovies(request.data.results);return _context.abrupt(\"return\",request);case 5:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();},[fetchUrl]);var opts={height:\"390\",width:\"100%\",playerVars:{autoplay:1}};var handleClick=function handleClick(movie){if(trailerUrl){setTrailerUrl(\"\");//To close player if trailer already playing\n}else{movieTrailer((movie===null||movie===void 0?void 0:movie.name)||\"\")//npm module that finds movie trailer based off name\n.then(function(url){console.log(url);console.log(movie.name);var urlParams=new URLSearchParams(new URL(url).search);//obtaining video ID from from URL\nsetTrailerUrl(urlParams.get(\"v\"));}).catch(function(error){return console.log(error);});}};return/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"h2\",{children:title}),/*#__PURE__*/_jsx(\"div\",{className:\"row_posters\",children:movies.map(function(movie){return/*#__PURE__*/_jsx(\"img\",{onClick:function onClick(){return handleClick(movie);},className:\"poster \".concat(isLargeRow&&\"posterLarge\"),src:\"\".concat(base_url).concat(isLargeRow?movie.poster_path:movie.backdrop_path),alt:movie.name},movie.id);})}),trailerUrl&&/*#__PURE__*/_jsx(YouTube,{videoId:trailerUrl,opts:opts})]});};export default Row;","map":{"version":3,"sources":["/mnt/c/Users/Iswara/Documents/Code Practice/Clever Programmer/netflix-clone/src/Row.js"],"names":["React","useState","useEffect","axios","base_url","YouTube","movieTrailer","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","get","request","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","then","url","console","log","urlParams","URLSearchParams","URL","search","catch","error","map","poster_path","backdrop_path","id"],"mappings":"mkBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,MAAO,WAAP,CACA,OAASC,QAAT,KAAyB,YAAzB,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CACA,MAAOC,CAAAA,YAAP,KAAyB,eAAzB,C,wFAEA,GAAMC,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,MAAqC,IAAlCC,CAAAA,KAAkC,MAAlCA,KAAkC,CAA3BC,QAA2B,MAA3BA,QAA2B,CAAjBC,UAAiB,MAAjBA,UAAiB,eACnBT,QAAQ,CAAC,EAAD,CADW,wCACxCU,MADwC,eAChCC,SADgC,8BAEXX,QAAQ,CAAC,EAAD,CAFG,yCAExCY,UAFwC,eAE5BC,aAF4B,eAG/CZ,SAAS,CAAC,UAAM,SACCa,CAAAA,SADD,qIACd,qKACwBZ,CAAAA,KAAK,CAACa,GAAN,CAAUP,QAAV,CADxB,QACQQ,OADR,eAEEL,SAAS,CAACK,OAAO,CAACC,IAAR,CAAaC,OAAd,CAAT,CAFF,gCAGSF,OAHT,wDADc,4CAMdF,SAAS,GACV,CAPQ,CAON,CAACN,QAAD,CAPM,CAAT,CASA,GAAMW,CAAAA,IAAI,CAAG,CACXC,MAAM,CAAE,KADG,CAEXC,KAAK,CAAE,MAFI,CAGXC,UAAU,CAAE,CACVC,QAAQ,CAAE,CADA,CAHD,CAAb,CAQA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAW,CAC7B,GAAIb,UAAJ,CAAgB,CACdC,aAAa,CAAC,EAAD,CAAb,CAAmB;AACpB,CAFD,IAEO,CACLR,YAAY,CAAC,CAAAoB,KAAK,OAAL,EAAAA,KAAK,SAAL,QAAAA,KAAK,CAAEC,IAAP,GAAe,EAAhB,CAAoB;AAAhC,CACGC,IADH,CACQ,SAACC,GAAD,CAAS,CACbC,OAAO,CAACC,GAAR,CAAYF,GAAZ,EACAC,OAAO,CAACC,GAAR,CAAYL,KAAK,CAACC,IAAlB,EACA,GAAMK,CAAAA,SAAS,CAAG,GAAIC,CAAAA,eAAJ,CAAoB,GAAIC,CAAAA,GAAJ,CAAQL,GAAR,EAAaM,MAAjC,CAAlB,CAA4D;AAC5DrB,aAAa,CAACkB,SAAS,CAAChB,GAAV,CAAc,GAAd,CAAD,CAAb,CACD,CANH,EAOGoB,KAPH,CAOS,SAACC,KAAD,QAAWP,CAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ,CAAX,EAPT,EAQD,CACF,CAbD,CAcA,mBACE,aAAK,SAAS,CAAC,KAAf,wBACE,oBAAK7B,KAAL,EADF,cAEE,YAAK,SAAS,CAAC,aAAf,UACGG,MAAM,CAAC2B,GAAP,CAAW,SAACZ,KAAD,qBACV,YAEE,OAAO,CAAE,yBAAMD,CAAAA,WAAW,CAACC,KAAD,CAAjB,EAFX,CAGE,SAAS,kBAAYhB,UAAU,EAAI,aAA1B,CAHX,CAIE,GAAG,WAAKN,QAAL,SACDM,UAAU,CAAGgB,KAAK,CAACa,WAAT,CAAuBb,KAAK,CAACc,aADtC,CAJL,CAOE,GAAG,CAAEd,KAAK,CAACC,IAPb,EACOD,KAAK,CAACe,EADb,CADU,EAAX,CADH,EAFF,CAeG5B,UAAU,eAAI,KAAC,OAAD,EAAS,OAAO,CAAEA,UAAlB,CAA8B,IAAI,CAAEO,IAApC,EAfjB,GADF,CAmBD,CArDD,CAuDA,cAAeb,CAAAA,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport { base_url } from \"./requests\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst Row = ({ title, fetchUrl, isLargeRow }) => {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  const opts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      autoplay: 1,\r\n    },\r\n  };\r\n\r\n  const handleClick = (movie) => {\r\n    if (trailerUrl) {\r\n      setTrailerUrl(\"\"); //To close player if trailer already playing\r\n    } else {\r\n      movieTrailer(movie?.name || \"\") //npm module that finds movie trailer based off name\r\n        .then((url) => {\r\n          console.log(url);\r\n          console.log(movie.name);\r\n          const urlParams = new URLSearchParams(new URL(url).search); //obtaining video ID from from URL\r\n          setTrailerUrl(urlParams.get(\"v\"));\r\n        })\r\n        .catch((error) => console.log(error));\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n      <div className=\"row_posters\">\r\n        {movies.map((movie) => (\r\n          <img\r\n            key={movie.id}\r\n            onClick={() => handleClick(movie)}\r\n            className={`poster ${isLargeRow && \"posterLarge\"}`}\r\n            src={`${base_url}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n      </div>\r\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Row;\r\n"]},"metadata":{},"sourceType":"module"}